 }

    public void parse() throws SyntaxException {
        stack.push("0");
        try
        {
            Symbol currentSymbol = lexer.yylex();
            while(currentSymbol != null)
            {
                Object top = stack.peek();
                String type = sym.terminalNames[currentSymbol.getType()];
                if(!table.contains(top,type)){
                    throw new SyntaxException("Syntax error line: " + currentSymbol.getYyline() + " column: " + currentSymbol.getYycolumn());
                }
                String action = table.get(top,type);
                doAction(action,currentSymbol.getValue());
                if(stack.peek().equals("acc")){
                    break;
                }
                if(next){
                    currentSymbol = lexer.yylex();
                }
            }
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
    }

    private void pop(Integer magnitude)
    {
        for(Integer i = 0; i < magnitude * 2; i++)
        {
            stack.pop();
        }
    }

    private void doAction(String action, Object value) throws SyntaxException {
        char firstCharacter = action.charAt(0);
        if(action.equals("acc"))
        {
            stack.push(action);
            next = true;
            return;
        }
        if(firstCharacter == 's'){
            stack.push(value);
            String indexGramatica = action.replace("s","");
            stack.push(indexGramatica);
            next = true;
        }
        else if(firstCharacter == 'r'){
            String indexGramatica2 = action.replace("r","");
            Integer grammarIndex = Integer.parseInt(indexGramatica2);
            Production production = productionDetails.get(grammarIndex - 1);
            Integer magnitude = 0;
            if(production.RightHandSide.size() > 1){
                magnitude = production.RightHandSide.size();
            }
            else if(!production.RightHandSide.get(0).equals("É›")){
                magnitude = 1;
            }
            reductionCases(grammarIndex, magnitude);
            if(!table.contains(stack.elementAt(stack.size()-2),production.LeftHandSide)){
                throw new SyntaxException("Syntax error");
            }
            stack.push(table.get(stack.elementAt(stack.size()-2),production.LeftHandSide));
            next = false;
        }
    }

    private void reductionCases(Integer grammarIndex, Integer magnitude)
    {
        Object RESULT = null;
        switch (grammarIndex)
        {